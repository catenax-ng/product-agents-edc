<?xml version="1.0" encoding="UTF-8"?>
<!--
  Pom for building the matchmaking data plane
  See copyright notice in the top folder
  See authors file in the top folder
  See license file in the top folder
-->
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <parent>
        <groupId>io.catenax</groupId>
        <artifactId>knowledge</artifactId>
        <version>0.5.3-SNAPSHOT</version>
        <relativePath>../../../pom.xml</relativePath>    
    </parent>

    <modelVersion>4.0.0</modelVersion>

    <groupId>io.catenax.knowledge.dataspace.edc</groupId>
    <artifactId>agentplane-azure-vault</artifactId>
    <packaging>jar</packaging>

    <name>Catena-X Knowledge Agents EDC Dataplane (Az-Vault)</name>
    <description>Builds a Containerized Agent Dataplane with Agent/Triple Extensions And Accessing the Azure Vault to Store Intermediate Secrets.</description>
    <url>http://catena-x.net/</url>

    <properties>
        <sonar.moduleKey>${project.groupId}_${project.artifactId}</sonar.moduleKey>
    </properties>

    <build>
        <finalName>${project.artifactId}</finalName>
        <resources>
            <resource>
                <directory>src/main/resources</directory>
                <includes>
                    <include>**/*</include>
                </includes>
            </resource>
            <resource>
                <directory>../../</directory>
                <targetPath>META-INF</targetPath>
                <includes>
                    <include>NOTICE.md</include>
                    <include>LICENSE</include>
                </includes>
            </resource>
        </resources>

        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jar-plugin</artifactId>
                <configuration>
                    <archive>
                        <manifest>
                            <addClasspath>true</addClasspath>
                            <classpathPrefix>lib/</classpathPrefix>
                            <mainClass>org.eclipse.dataspaceconnector.boot.system.runtime.BaseRuntime</mainClass>
                            <useUniqueVersions>false</useUniqueVersions>
                        </manifest>
                    </archive>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-dependency-plugin</artifactId>
                <executions>
                    <execution>
                        <phase>package</phase>
                        <goals>
                            <goal>copy-dependencies</goal>
                        </goals>
                        <configuration>
                            <outputDirectory>${project.build.directory}/lib</outputDirectory>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
             <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>3.0.0-M3</version>
            </plugin>
        </plugins>
    </build>

    <dependencies>
        <!-- Base Data-Plane -->
        <dependency>
            <groupId>net.catenax.edc</groupId>
            <artifactId>edc-dataplane-base</artifactId>
            <version>0.0.6-KA</version>
        </dependency>

        <dependency>
            <groupId>jakarta.ws.rs</groupId>
            <artifactId>jakarta.ws.rs-api</artifactId>
            <version>3.1.0</version>
        </dependency>

        <dependency>
            <groupId>javax.servlet</groupId>
            <artifactId>javax.servlet-api</artifactId>
            <version>4.0.1</version>
        </dependency>

        <dependency>
            <groupId>com.auth0</groupId>
            <artifactId>java-jwt</artifactId>
            <version>4.0.0</version>
        </dependency>

        <!-- https://mvnrepository.com/artifact/org.glassfish.jersey.core/jersey-server -->
        <dependency>
            <groupId>org.eclipse.jetty.toolchain</groupId>
            <artifactId>jetty-jakarta-servlet-api</artifactId>
            <version>5.0.2</version>
        </dependency>

        <dependency>
          <groupId>org.apache.jena</groupId>
          <artifactId>jena-fuseki-core</artifactId>
          <version>4.6.0</version>
          <exclusions>
                <exclusion>
                    <groupId>org.slf4j</groupId>
                    <artifactId>slf4j-api</artifactId>
                </exclusion>            
                <exclusion>
                    <groupId>org.slf4j</groupId>
                    <artifactId>slf4j-api</artifactId>
                </exclusion>            
                <exclusion>
                    <groupId>org.eclipse.jetty</groupId>
                    <artifactId>jetty-server</artifactId>
                </exclusion>            
                <exclusion>
                    <groupId>org.eclipse.jetty</groupId>
                    <artifactId>jetty-http</artifactId>
                </exclusion>            
                <exclusion>
                    <groupId>org.eclipse.jetty</groupId>
                    <artifactId>jetty-io</artifactId>
                </exclusion>            
                <exclusion>
                    <groupId>org.eclipse.jetty</groupId>
                    <artifactId>jetty-security</artifactId>
                </exclusion>            
                <exclusion>
                    <groupId>org.eclipse.jetty</groupId>
                    <artifactId>jetty-servlets</artifactId>
                </exclusion>     
                <exclusion>
                    <groupId>org.eclipse.jetty</groupId>
                    <artifactId>jetty-servlet</artifactId>
                </exclusion>            
                <exclusion>
                    <groupId>org.eclipse.jetty</groupId>
                    <artifactId>jetty-servlet</artifactId>
                </exclusion>            
          </exclusions>
        </dependency>

        <!--<dependency>
          <groupId>org.apache.jena</groupId>
          <artifactId>jena-fuseki-arq</artifactId>
          <version>4.6.0</version>
          <exclusions>
                <exclusion>
                    <groupId>org.slf4j</groupId>
                    <artifactId>slf4j-api</artifactId>
                </exclusion>            
                <exclusion>
                    <groupId>org.slf4j</groupId>
                    <artifactId>slf4j-api</artifactId>
                </exclusion> 
          </exclusions>
        </dependency>-->

        <!-- Vault -->
        <dependency>
            <groupId>org.eclipse.dataspaceconnector</groupId>
            <artifactId>azure-vault</artifactId>
            <exclusions>
                <exclusion>
                    <groupId>com.azure</groupId>
                    <artifactId>azure-security-keyvault-secrets</artifactId>
                </exclusion>
                <exclusion>
                    <groupId>com.azure</groupId>
                    <artifactId>azure-identity</artifactId>
                </exclusion>
            </exclusions>
            <version>0.0.6-KA</version>
        </dependency>

        <!-- Other -->
        <dependency>
            <groupId>com.azure</groupId>
            <artifactId>azure-identity</artifactId>
        </dependency>
        <dependency>
            <groupId>com.azure</groupId>
            <artifactId>azure-security-keyvault-secrets</artifactId>
        </dependency>

        <!-- Test -->
        <dependency>
         <groupId>org.junit.jupiter</groupId>
         <artifactId>junit-jupiter-engine</artifactId>
         <scope>test</scope>
       </dependency>

    </dependencies>

    <profiles>
        <profile>
            <!--
                mvn package -Pwith-docker-image
            -->
            <id>with-docker-image</id>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.codehaus.mojo</groupId>
                        <artifactId>exec-maven-plugin</artifactId>
                        <!--
                            NOTE: To build and tag docker images the `docker` executable needs to
                                  be on the PATH to be used by the exec-maven-plugin plugin
                        -->
                        <executions>
                            <execution>
                                <id>docker-build-${project.artifactId}:${project.version}</id>
                                <phase>package</phase>
                                <goals>
                                    <goal>exec</goal>
                                </goals>
                                <configuration>
                                    <executable>docker</executable>
                                    <workingDirectory>${project.basedir}</workingDirectory>
                                    <arguments>
                                        <argument>build</argument>
                                        <argument>--platform</argument>
                                        <argument>${platform}</argument>
                                        <argument>-f</argument>
                                        <argument>src/main/docker/Dockerfile</argument>
                                        <argument>--build-arg</argument>
                                        <argument>JAR=target/${project.artifactId}.jar</argument>
                                        <argument>--build-arg</argument>
                                        <argument>LIB=target/lib</argument>
                                        <argument>-t</argument>
                                        <argument>${repo}${project.artifactId}:${project.version}</argument>
                                        <argument>.</argument>
                                    </arguments>
                                </configuration>
                            </execution>
                            <execution>
                                <id>docker-tag-${project.artifactId}:latest</id>
                                <phase>package</phase>
                                <goals>
                                    <goal>exec</goal>
                                </goals>
                                <configuration>
                                    <executable>docker</executable>
                                    <workingDirectory>${project.basedir}</workingDirectory>
                                    <arguments>
                                        <argument>tag</argument>
                                        <argument>${repo}${project.artifactId}:${project.version}</argument>
                                        <argument>${repo}${project.artifactId}:latest</argument>
                                    </arguments>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
    </profiles>
</project>